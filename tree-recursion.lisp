(defun tree-map (f tree)
  (labels ((rec (tree acc)
             (cond ((null tree) (nreverse acc))
                   ((consp (car tree)) (rec (cdr tree)
                                            (cons (rec (car tree) '())
                                                  acc)))
                   (t (rec (cdr tree)
                           (cons (funcall f (car tree)) acc))))))
    (rec tree '())))

(defun tree-filter (f tree)
  (labels ((rec (tree acc)
             (cond ((null tree) (nreverse acc))
                   ((consp (car tree)) (rec (cdr tree)
                                            (let ((sub-tree (rec (car tree)
                                                                 nil)))
                                              (if sub-tree
                                                  (cons (car tree) acc)
                                                  acc))))
                   (t (rec (cdr tree)
                           (let ((x (funcall f (car tree))))
                             (if x
                                 (cons (car tree) acc)
                                 acc)))))))
    (rec tree '())))